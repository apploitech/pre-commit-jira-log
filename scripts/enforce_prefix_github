#!/usr/bin/env python3
"""
enforce_prefix

Usage:
  enforce_prefix (--token=<token>) (--repo=<repo>) (--pr=<pr>) (--root=<root>) (--sha1=<sha1>) (--sha2=<sha2>) <project-key>...

Options:
  -h --help     Show this screen.
  --version     Show version.
"""

import re
import sys
from itertools import chain
from pathlib import Path
from collections import namedtuple as nt

from docopt import docopt
from git import Repo
from github import Github


ARGS = ("--root", "--sha1", "--sha2", "<project-key>", "--token", "--pr", "--repo")


def args_to_nt(args):
    return nt("Data", "path, sha1, sha2, keys, token, pr repo")(
        *[args[e] for e in ARGS]
    )


if __name__ == "__main__":
    r = args_to_nt(docopt(__doc__))

    if not Path(r.path).exists():
        err(f"{path} does not exist")
        exit(1)

    repo = Repo(r.path)
    revs = [
        repo.iter_commits(rev=f"{x}..{y}")
        for (x, y) in ((r.sha1, r.sha2), (r.sha2, r.sha1))
    ]
    project_re = re.compile(f"^{'|'.join(re.escape(e) for e in r.keys)}:")

    bad_commits = [
        commit
        for commit in chain.from_iterable(revs)
        if not project_re.match(commit.message)
    ]
    if bad_commits:
        err = 'The following commits do not follow the format "KEY-123:"\n'
        err += (
            f"Where KEY is one of the following project keys: {', '.join(r.keys)}\n\n"
        )

        for commit in bad_commits:
            err += f"{commit.hexsha} by {commit.author}\n"

        print(err, file=sys.stderr)
        Github(r.token).get_repo(r.repo).get_pull(int(r.pr)).as_issue().create_comment(
            err
        )
